#include "music.h"

#include <iostream>

void dump_notes(std::vector<z2music::Note> notes) {
  for (z2music::Note n : notes) {
    std::cout << n.pitch_string();
    size_t left = n.length() / 4 - 4;
    std::cout << std::string(left, '.');
  }
  std::cout << std::endl;
}

void dump_song(const z2music::Song& song) {
  std::cout << "Song length: " << song.sequence_length() << " phrases" << std::endl;

  for (size_t i = 0; i < song.sequence_length(); ++i) {
    const z2music::Pattern* p = song.at(i);
    dump_notes(p->notes(z2music::Pattern::Channel::Pulse1));
    dump_notes(p->notes(z2music::Pattern::Channel::Pulse2));
    dump_notes(p->notes(z2music::Pattern::Channel::Triangle));
    dump_notes(p->notes(z2music::Pattern::Channel::Noise));
    std::cout << std::endl;
  }
}

void set_overworld_intro(z2music::Song* intro) {
  intro->clear();

  intro->add_pattern({
      0x18,
      { 0xd0, 0x07, 0x90, 0x10, 0x14, 0x16, 0x1a, 0x5f, 0x43, 0xe8, 0x1f, 0xa8, 0x28, 0x2c, 0x2e, 0x32, 0x77, 0x43 },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0xa8, 0xae, 0xb6, 0xa8, 0xae, 0xa8, 0xb6, 0xa8, 0xa4, 0xac, 0xb6, 0xa4, 0xac, 0xa4, 0xb6, 0xa4, 0xa0, 0xa8, 0xb2, 0xa0, 0xa8, 0xa0, 0xb2, 0xa0, 0xa4, 0xac, 0xb2, 0xa4, 0xac, 0xa4, 0xb2, 0xa4 },
      {},
      });

  intro->set_sequence({0});
}

void set_overworld_theme(z2music::Song* theme) {
  theme->clear();

  theme->add_pattern({
      0x18,
      { 0x29, 0x9e, 0x68, 0x6c, 0xae, 0x6d, 0xe8, 0xe4, 0x69, 0x43, 0x5b, 0x5f },
      { 0x90, 0x90, 0x82, 0x90, 0x90, 0x90, 0x82, 0x90, 0x86, 0x86, 0x82, 0x86, 0x86, 0x86, 0x82, 0x86, 0x88, 0x88, 0x82, 0x88, 0x88, 0x88, 0x82, 0x88, 0x8c, 0x8c, 0x82, 0x8c, 0x8c, 0x8c, 0x82, 0x8c },
      { 0xa8, 0xae, 0xb6, 0xa8, 0xae, 0xa8, 0xb6, 0xa8, 0xa4, 0xac, 0xb6, 0xa4, 0xac, 0xa4, 0xb6, 0xa4, 0xa0, 0xa8, 0xb2, 0xa0, 0xa8, 0xa0, 0xb2, 0xa0, 0xa4, 0xac, 0xb2, 0xa4, 0xac, 0xa4, 0xb2, 0xa4 },
      { 0x49, 0xc8, 0x88, 0x08, 0x08, 0x49, 0xc8, 0x88, 0x08, 0x08, 0x49, 0xc8, 0x88, 0x88, 0x88, 0x08, 0x08, 0x88, 0x88, 0x08, 0x08, 0x88, 0x88, 0xc8 },
      });

  theme->add_pattern({
      0x18,
      { 0x29, 0x9e, 0x68, 0x6c, 0xae, 0x6d, 0xe8, 0xe4, 0x6f, 0x43, 0x73, 0x43 },
      { 0x90, 0x90, 0x82, 0x90, 0x90, 0x90, 0x82, 0x90, 0x8c, 0x8c, 0x82, 0x8c, 0x8c, 0x8c, 0x82, 0x8c, 0x96, 0x96, 0x82, 0x96, 0x96, 0x96, 0x82, 0x96, 0x9a, 0x9a, 0x82, 0x9a, 0x9a, 0x9a, 0x82, 0x9a },
      { 0xa8, 0xae, 0xb6, 0xa8, 0xae, 0xa8, 0xb6, 0xa8, 0xa4, 0xac, 0xb6, 0xa4, 0xac, 0xa4, 0xb6, 0xa4, 0xa0, 0xa8, 0xb2, 0xa0, 0xa8, 0xa0, 0xb2, 0xa0, 0xa4, 0xac, 0xb2, 0xa4, 0xac, 0xa4, 0xb2, 0xa4 },
      { 0x49, 0xc8, 0x88, 0x08, 0x08, 0x49, 0xc8, 0x88, 0x08, 0x08, 0x49, 0xc8, 0x88, 0x88, 0x88, 0x08, 0x08, 0x88, 0x88, 0x08, 0x08, 0x88, 0x88, 0xc8 },
      });

  theme->add_pattern({
      0x18,
      { 0xb6, 0xb2, 0xae, 0xac, 0xe8, 0xa4, 0xa8, 0xec, 0xae, 0xb2, 0xee, 0xec, 0xae, 0xac, 0x69, 0xc2, 0xac, 0xa8, 0x65, 0xc2 },
      { 0x9e, 0x9e, 0x82, 0x9e, 0x9e, 0x9e, 0x82, 0x9e, 0x94, 0x94, 0x82, 0x94, 0x94, 0x94, 0x82, 0x94, 0x96, 0x96, 0x82, 0x96, 0x96, 0x96, 0x82, 0x96, 0x9a, 0x9a, 0x82, 0x9a, 0x9a, 0x9a, 0x82, 0x9a },
      { 0xa8, 0xae, 0xb6, 0xa8, 0xae, 0xa8, 0xb6, 0xa8, 0xa4, 0xac, 0xb6, 0xa4, 0xac, 0xa4, 0xb6, 0xa4, 0xa0, 0xa8, 0xb2, 0xa0, 0xa8, 0xa0, 0xb2, 0xa0, 0xa4, 0xac, 0xb2, 0xa4, 0xac, 0xa4, 0xb2, 0xa4 },
      { 0xc8, 0xc8, 0xc8, 0x88, 0x08, 0x08, 0xc8, 0xc8, 0xc8, 0x88, 0x88, 0xc8, 0xc8, 0xc8, 0xc8, 0x08, 0x08, 0x88, 0x88, 0x88, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 },
      });

  theme->add_pattern({
      0x18,
      { 0xb6, 0xb2, 0xae, 0xac, 0xe8, 0xa4, 0xa8, 0xec, 0xae, 0xb2, 0xee, 0xec, 0xae, 0xac, 0x6f, 0xc2, 0xb2, 0xae, 0xf2, 0xec, 0xe6 },
      { 0x9e, 0x9e, 0x82, 0x9e, 0x9e, 0x9e, 0x82, 0x9e, 0x94, 0x94, 0x82, 0x94, 0x94, 0x94, 0x82, 0x94, 0x96, 0x96, 0x82, 0x96, 0x96, 0x96, 0x82, 0x96, 0x9a, 0x9a, 0x82, 0x9a, 0x9a, 0x8e, 0x82, 0x8e },
      { 0xa8, 0xae, 0xb6, 0xa8, 0xae, 0xa8, 0xb6, 0xa8, 0xa4, 0xac, 0xb6, 0xa4, 0xac, 0xa4, 0xb6, 0xa4, 0xa0, 0xa8, 0xb2, 0xa0, 0xa8, 0xa0, 0xb2, 0xa0, 0xa4, 0xac, 0xb2, 0xa4, 0xac, 0xa4, 0xb2, 0xa4 },
      { 0xc8, 0xc8, 0xc8, 0x88, 0x08, 0x08, 0xc8, 0xc8, 0xc8, 0x88, 0x88, 0xc8, 0xc8, 0xc8, 0xc8, 0x08, 0x08, 0x88, 0x88, 0x88, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 },
      });

  theme->set_sequence({0, 1, 0, 1, 2, 3});
}

void set_dungeon_intro(z2music::Song* intro) {
  intro->clear();

  intro->add_pattern({
      0x10,
      { 0x8e, 0x8e, 0x8a, 0xce, 0xd2, 0xd4, 0xd2, 0xd4, 0x92, 0x94, 0x98 },
      { 0x43, 0x43, 0x43, 0x43 },
      { 0xa6, 0x82, 0xa6, 0x82, 0xa0, 0x82, 0xa0, 0x82, 0x9a, 0x82, 0x9a, 0x82, 0x94, 0x82, 0x94, 0x82 },
      {},
      });

  intro->set_sequence({0});
}

void set_dungeon_theme(z2music::Song* theme) {
  theme->clear();

  theme->add_pattern({
      0x10,
      { 0x5d, 0x43, 0xc2, 0xd8, 0xdc, 0xde, 0x63, 0x5f, 0x5d, 0x59 },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0xa6, 0xa0, 0x9a, 0x94, 0xa6, 0xa0, 0x9a, 0x94, 0xa6, 0xa0, 0x9a, 0x94, 0xa6, 0xa0, 0x9a, 0x94, 0xa2, 0x9c, 0x96, 0x90, 0xa2, 0x9c, 0x96, 0x90, 0xa2, 0x9c, 0x96, 0x90, 0xa2, 0x9c, 0x96, 0x90 },
      { 0x49, 0x49, 0xc0, 0xc8, 0x88, 0x09 },
      });

  theme->add_pattern({
      0x10,
      { 0x55, 0x43, 0xc2, 0xd2, 0xd4, 0xd8, 0x4f, 0x43, 0x53, 0x43 },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0x9e, 0x98, 0x92, 0x8c, 0x9e, 0x98, 0x92, 0x8c, 0x9e, 0x98, 0x92, 0x8c, 0x9e, 0x98, 0x92, 0x8c, 0x9a, 0x94, 0x8e, 0x88, 0x9a, 0x94, 0x8e, 0x88, 0x9a, 0x94, 0x8e, 0x88, 0x88, 0x8e, 0x94, 0x9a },
      { 0x49, 0x49, 0xc0, 0xc8, 0x88, 0x09 },
      });

  theme->add_pattern({
      0x10,
      { 0x55, 0x43, 0xc2, 0xd2, 0xd4, 0xd8, 0x5d, 0x59, 0x63, 0x5f },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0x9e, 0x98, 0x92, 0x8c, 0x9e, 0x98, 0x92, 0x8c, 0x9e, 0x98, 0x92, 0x8c, 0x9e, 0x98, 0x92, 0x8c, 0x9a, 0x94, 0x8e, 0x88, 0x9a, 0x94, 0x8e, 0x88, 0x9a, 0x94, 0x8e, 0x88, 0x8e, 0x94, 0x9a, 0xa0 },
      { 0x49, 0x49, 0xc0, 0xc8, 0x88, 0x09 },
      });

  theme->set_sequence({0, 0, 1, 2});
}

void set_town_intro(z2music::Song* intro) {
  intro->clear();

  intro->add_pattern({
      0x20,
      { 0x53, 0xd0, 0xcc },
      { 0x43, 0x43 },
      { 0x9c, 0x9a, 0x96, 0x92, 0x96, 0x92, 0x90, 0x8c },
      {},
      });

  intro->set_sequence({0});
}

void set_town_theme(z2music::Song* theme) {
  theme->clear();

  theme->add_pattern({
      0x20,
      { 0x82, 0xba, 0xb8, 0xb4, 0xb2, 0x43, 0xba, 0xb8, 0xb4, 0xb2, 0xae, 0xb2, 0xb4, 0x82, 0xba, 0xb8, 0xb4, 0xb2, 0x43, 0xba, 0xb8, 0xb4, 0xb2, 0xae, 0xb2, 0xb4 },
      { 0x65, 0xa2, 0x43, 0xa4, 0xa2, 0xa4, 0xe8, 0xea, 0x65, 0xa2, 0x43, 0xa4, 0xa2, 0xa4, 0xa8, 0xaa, 0xa8, 0xa4 },
      { 0xd0, 0xd6, 0x90, 0xd6, 0xdc, 0xd6, 0x90, 0xd6, 0xdc, 0xd0, 0xd6, 0x90, 0xd6, 0xdc, 0xd6, 0x90, 0xd6, 0xdc },
      { 0x49, 0x49, 0x49, 0xc8, 0x88, 0x88 },
      });

  theme->add_pattern({
      0x20,
      { 0xea, 0xee, 0xb2, 0x43, 0xaa, 0x82, 0xae, 0xb2, 0x82, 0xae, 0x82, 0xea, 0xee, 0xb2, 0x43, 0xaa, 0x82, 0xae, 0xb2, 0xb4, 0xb8, 0xb4 },
      { 0x63, 0xa4, 0x43, 0xa2, 0xa4, 0xa8, 0xea, 0xe8, 0x63, 0xa4, 0x43, 0xa2, 0xa4, 0xa8, 0xaa, 0xa8, 0xa4, 0xa8 },
      { 0xcc, 0xd2, 0xa4, 0xd2, 0xda, 0xd2, 0x8c, 0xd2, 0xda, 0xcc, 0xd2, 0x8c, 0xd2, 0xda, 0xd2, 0x8c, 0xd2, 0xda },
      { 0x49, 0x49, 0x49, 0xc8, 0x88, 0x88 },
      });

  theme->set_sequence({0, 1});
}

void set_house_theme(z2music::Song* theme) {
  theme->clear();

  theme->add_pattern({
      0x20,
      { 0x65, 0xa2, 0x43, 0xa4, 0xa2, 0xa4, 0xe8, 0xea, 0x65, 0xa2, 0x43, 0xa4, 0xa2, 0xa4, 0xa8, 0xaa, 0xa8, 0xa4 },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0xd0, 0xd6, 0x90, 0xd6, 0xdc, 0xd6, 0x90, 0xd6, 0xdc, 0xd0, 0xd6, 0x90, 0xd6, 0xdc, 0xd6, 0x90, 0xd6, 0xdc },
      { 0x49, 0x49, 0x49, 0xc8, 0x88, 0x88 },
      });

  theme->add_pattern({
      0x20,
      { 0x63, 0xa4, 0x43, 0xa2, 0xa4, 0xa8, 0xea, 0xe8, 0x63, 0xa4, 0x43, 0xa2, 0xa4, 0xa8, 0xaa, 0xa8, 0xa4, 0xa8 },
      { 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43 },
      { 0xcc, 0xd2, 0xa4, 0xd2, 0xda, 0xd2, 0x8c, 0xd2, 0xda, 0xcc, 0xd2, 0x8c, 0xd2, 0xda, 0xd2, 0x8c, 0xd2, 0xda },
      { 0x49, 0x49, 0x49, 0xc8, 0x88, 0x88 },
      });

  theme->set_sequence({0, 1});
}

void set_credits_theme(z2music::Song* theme) {
  theme->clear();

  theme->add_pattern({
      0x28,
      { 0x82, 0xac, 0xb0, 0xb6, 0x71, 0x82, 0xac, 0xb0, 0xb6, 0xf0, 0xac, 0x82, 0xac, 0xe6, 0xec, 0xb0, 0xec, 0x43, 0x82, 0xac, 0xa6, 0xa2 },
      { 0x82, 0x98, 0x94, 0x82, 0x94, 0x8e, 0x82, 0x8e, 0x8a, 0x82, 0x8e, 0x8a, 0x82, 0x8e, 0x94, 0xc2, 0x98, 0x94, 0x82, 0x94, 0x8e, 0x82, 0x8e, 0x8a, 0x8e, 0x8a, 0x82, 0x94, 0x82, 0x8e, 0x82 },
      { 0x98, 0xc2, 0x98, 0x9e, 0x82, 0xa6, 0x82, 0x98, 0xc2, 0x98, 0x9e, 0x82, 0xa6, 0x82, 0x94, 0xc2, 0x94, 0x9c, 0x82, 0xa6, 0x82, 0x94, 0xc2, 0x94, 0x9c, 0x82, 0xa6, 0x82 },
      { 0xc8, 0x88, 0x09, 0x09, 0xc8, 0x88 },
      });

  theme->add_pattern({
      0x28,
      { 0xe6, 0xac, 0x03, 0xa6, 0x82, 0xa6, 0xac, 0x82, 0xe2, 0x82, 0xa6, 0x82, 0xe6, 0x82, 0xe2, 0x82, 0xe6, 0xc2, 0xac, 0x82, 0xb0, 0xb6, 0xb0, 0xac },
      { 0x82, 0x98, 0x94, 0x82, 0x94, 0x8e, 0x82, 0x8a, 0x8e, 0x94, 0x98, 0x94, 0x98, 0x82, 0x9e, 0xc2, 0x98, 0x94, 0x8e, 0x94, 0x82, 0x94, 0x8e, 0x8e, 0x82, 0x8a, 0x8e, 0x84, 0x03 },
      { 0x90, 0xc2, 0x90, 0x98, 0x82, 0xa2, 0x82, 0x90, 0xc2, 0x90, 0x98, 0x82, 0xa2, 0x82, 0x94, 0xc2, 0x94, 0x9c, 0x82, 0xa2, 0x82, 0x94, 0xc2, 0x94, 0x9c, 0x82, 0xa2, 0x82 },
      { 0xc8, 0x88, 0x09, 0x09, 0xc8, 0x88 },
      });

  theme->add_pattern({
      0x28,
      { 0xc2, 0xb0, 0x82, 0xac, 0xb0, 0xb6, 0xb0, 0xb0, 0x82, 0xb0, 0x82, 0xac, 0x82, 0xb0, 0x82, 0xb6, 0xf8, 0xf6, 0xf0, 0xb6, 0xc2, 0xb0, 0x82, 0xf6, 0xf8 },
      { 0x82, 0x98, 0x94, 0x82, 0x94, 0x8e, 0x82, 0x8e, 0x8a, 0x8e, 0x94, 0x82, 0x98, 0x82, 0x94, 0x03, 0x94, 0x98, 0x9e, 0x82, 0x9e, 0x98, 0x9e, 0x82, 0xa2, 0x82, 0x9e, 0x82, 0x98, 0x82 },
      { 0x98, 0xc2, 0x98, 0x9e, 0x82, 0xa6, 0x82, 0x98, 0xc2, 0x98, 0x9e, 0x82, 0xa6, 0x82, 0x94, 0xc2, 0x94, 0x9c, 0x82, 0xa6, 0x82, 0x94, 0xc2, 0x94, 0x9c, 0x82, 0xa6, 0x82 },
      { 0xc8, 0x88, 0x09, 0x09, 0xc8, 0x88 },
      });

  theme->add_pattern({
      0x28,
      { 0xb6, 0xf0, 0xec, 0x03, 0xc2, 0xf0, 0xec, 0xe6, 0xe2, 0x82, 0xe6, 0x03, 0xc2, 0xec, 0xb0, 0xb6, 0xb8, 0xb6 },
      { 0x98, 0x94, 0x98, 0x94, 0xc2, 0x8e, 0x8a, 0x8e, 0x82, 0x94, 0x82, 0x98, 0x82, 0x94, 0x82, 0x98, 0x94, 0x8e, 0x8a, 0xc2, 0x8a, 0x8e, 0x8a, 0x82, 0x8a, 0x82, 0x98, 0x03 },
      { 0x90, 0xc2, 0x90, 0x98, 0x82, 0xa2, 0x82, 0x90, 0xc2, 0x90, 0x98, 0x82, 0xa2, 0x82, 0x94, 0xc2, 0x94, 0x9c, 0x82, 0xa2, 0x82, 0x94, 0xc2, 0x94, 0x9c, 0x82, 0xa2, 0x82 },
      { 0xc8, 0x88, 0x09, 0x09, 0xc8, 0x88 },
      });

  theme->set_sequence({0, 1, 2, 3});
}

void set_encounter_theme(z2music::Song* theme) {
  theme->clear();

  theme->add_pattern({
      0x10,
      { 0x31, 0x2d, 0x2b, 0x27, 0xea, 0xec, 0xaa, 0xac, 0x82, 0xb0, 0x43, 0xc2, 0xf6, 0xf4, 0xf0 },
      { 0x82, 0x14, 0x02, 0x14, 0x02, 0x14, 0x42, 0x12, 0x02, 0x12, 0x02, 0x12, 0x42, 0x0e, 0x02, 0x0e, 0x02, 0x0e, 0x42, 0x0c, 0x02, 0x0e, 0x02, 0x0c, 0x02, 0x0e, 0x02, 0x12, 0x02, 0x14, 0x42, 0x43, 0x43, 0x43 },
      { 0x8e, 0x94, 0x9c, 0x9e, 0x8e, 0x94, 0x9c, 0x9e, 0x8e, 0x94, 0x9c, 0x9e, 0x8e, 0x94, 0x9c, 0x9e, 0x8a, 0x92, 0x98, 0x9c, 0x8a, 0x92, 0x98, 0x9c, 0x8a, 0x92, 0x98, 0x9c, 0x8a, 0x92, 0x98 },
      { 0x82, 0x88, 0x88, 0x88, 0x49, 0x49, 0xc8, 0xc8 },
      });

  theme->add_pattern({
      0x10,
      { 0x31, 0x2d, 0x2b, 0x27, 0xea, 0xec, 0xaa, 0xac, 0x82, 0xaa, 0x43, 0xc2, 0xea, 0xe6, 0xe2 },
      { 0x82, 0x14, 0x02, 0x14, 0x02, 0x14, 0x42, 0x12, 0x02, 0x12, 0x02, 0x12, 0x42, 0x0e, 0x02, 0x0e, 0x02, 0x0e, 0x42, 0x0c, 0x02, 0x0e, 0x02, 0x0c, 0x02, 0x0a, 0x42, 0xc2, 0x43, 0x43, 0x43 },
      { 0x86, 0x8e, 0x94, 0x98, 0x86, 0x8e, 0x94, 0x98, 0x86, 0x8e, 0x94, 0x98, 0x86, 0x8e, 0x94, 0x98, 0x8a, 0x92, 0x98, 0x9c, 0x8a, 0x92, 0x98, 0x9c, 0x8a, 0x92, 0x98, 0x9c, 0x9e, 0x9c, 0x98, 0x94 },
      { 0x82, 0x88, 0x88, 0x88, 0x49, 0x49, 0xc8, 0xc8 },
      });

  theme->set_sequence({0, 1});
}

int main(int argc, char** argv) {
  if (argc != 2) {
    std::cout << "Usage: " << argv[0] << " z2_rom" << std::endl;
    return 1;
  }

  const std::string file = std::string(argv[1]);

  z2music::Rom rom(file);

  // Change overworld music
  set_overworld_intro(rom.song(z2music::Rom::SongTitle::OverworldIntro));
  set_overworld_theme(rom.song(z2music::Rom::SongTitle::OverworldTheme));

  // Change encounter music
  set_encounter_theme(rom.song(z2music::Rom::SongTitle::BattleTheme));

  // Change town music
  set_town_intro(rom.song(z2music::Rom::SongTitle::TownIntro));
  set_town_theme(rom.song(z2music::Rom::SongTitle::TownTheme));
  set_house_theme(rom.song(z2music::Rom::SongTitle::HouseTheme));

  // Change dungeon music
  set_dungeon_intro(rom.song(z2music::Rom::SongTitle::PalaceIntro));
  set_dungeon_theme(rom.song(z2music::Rom::SongTitle::PalaceTheme));

  // Change credits music
  set_credits_theme(rom.song(z2music::Rom::SongTitle::CreditsTheme));

  // Fix a bug in the vanilla game
  rom.write(0x5d6b, { 0xea, 0xea, 0xea });

  rom.save("/tmp/output.nes");

  return 0;
}
